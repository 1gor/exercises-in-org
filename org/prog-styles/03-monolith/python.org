#+TITLE: Monolith in Python
#+startup: showeverything

** Implementation
   
- Imports and definitions required.
  Note that we need to run this from the root of the repo.

#+BEGIN_SRC python :tangle src/prog-styles/monolith-in-python/run.py :mkdirp true
import sys, string, os

src_root		= "src/exercises-in-programming-style/"
pride_and_prejudice	= os.path.join(src_root, "pride-and-prejudice.txt")
stop_words		= os.path.join(src_root, "stop_words.txt")
#+END_SRC

- We hold a global list variable that is used to hold the 
  =[word, frequency]= pairs associating words with their frequencies.
  
#+BEGIN_SRC python :tangle src/prog-styles/monolith-in-python/run.py :mkdirp true
word_freqs = []
#+END_SRC

- We first read the /stop words/ that we will not consider in the
  term frequency.

#+BEGIN_SRC python :tangle src/prog-styles/monolith-in-python/run.py :mkdirp true
with open(stop_words) as f:
    stop_words = f.read().split(',')
#+END_SRC

- We also ignore single letters frequency. The list =string.ascii_lowercase=
  contains the alphabet, so we can rely on this definition:

#+BEGIN_SRC python :results output code :exports both
import string
print list(string.ascii_lowercase)
#+END_SRC

#+RESULTS:
#+BEGIN_SRC python
['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z']
#+END_SRC

We extend the =stop_words= list to include the single letters:

#+BEGIN_SRC python :tangle src/prog-styles/monolith-in-python/run.py :mkdirp true
stop_words.extend(list(string.ascii_lowercase))
#+END_SRC

- Scan the file character by character for words line per line.
  The technique being used here is to accumulate the characters that
  conform a word until a non alphanumerical value is found.
  Once we found a word, it becomes acccumulated in the =word_freqs= list.

#+BEGIN_SRC python :tangle src/prog-styles/monolith-in-python/run.py :mkdirp true
for line in open(pride_and_prejudice):
    start_char = None
    i = 0
    for c in line:
        if start_char == None:
            if c.isalnum():
                # We found the start of a word
                start_char = i
        else:
            if not c.isalnum():
                # We found the end of a word. Process it
                found = False
                word = line[start_char:i].lower()
                # Ignore stop words
                if word not in stop_words:
                    pair_index = 0
                    # Let's see if it already exists
                    for pair in word_freqs:
                        if word == pair[0]:
                            pair[1] += 1
                            found = True
                            found_at = pair_index
                            break
                        pair_index += 1
                    if not found:
                        word_freqs.append([word, 1])
                    elif len(word_freqs) > 1:
                        # We may need to reorder
                        for n in reversed(range(pair_index)):
                            if word_freqs[pair_index][1] > word_freqs[n][1]:
                                # swap
                                word_freqs[n], word_freqs[pair_index] = word_freqs[pair_index], word_freqs[n]
                                pair_index = n
                # Let's reset
                start_char = None
        i += 1
#+END_SRC

- Finally, we print the results from this search.

#+BEGIN_SRC python :tangle src/prog-styles/monolith-in-python/run.py :mkdirp true

for tf in word_freqs[0:25]:
    print tf[0], ' - ', tf[1]
#+END_SRC

*** DONE Running the program

#+name: monolith-in-python
#+BEGIN_SRC sh :results output
python src/prog-styles/monolith-in-python/run.py
#+END_SRC

#+RESULTS: monolith-in-python
#+include: "org/prog-styles/results.org"

** DONE Notes

A bit delicate to do literate programming in python
due to messing up indentations during tangling step.
I would have to say that the cookbook style is more suited 
for doing lp with python than the monolithic style.

